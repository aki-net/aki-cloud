---
- name: Update aki-cloud nodes from credentials file
  hosts: localhost
  gather_facts: false
  vars:
    repo_root: "{{ playbook_dir | dirname | dirname }}"
    credentials_file: "{{ aki_root_password_file | default(repo_root ~ '/ansible/credentials/root-passwords.yml') }}"
  tasks:
    - name: Check for credentials file
      ansible.builtin.stat:
        path: "{{ credentials_file }}"
      register: credentials_file_stat

    - name: Ensure credentials file exists
      ansible.builtin.fail:
        msg: >-
          Credentials file not found at {{ credentials_file }}.
          Create the file with node configurations before running this playbook.
      when: not credentials_file_stat.stat.exists

    - name: Load node credentials
      ansible.builtin.include_vars:
        file: "{{ credentials_file }}"
      
    - name: Add hosts to inventory
      ansible.builtin.add_host:
        name: "{{ item.key }}"
        ansible_host: "{{ item.value.host }}"
        ansible_user: root
        ansible_ssh_pass: "{{ item.value.password }}"
        project_root: /opt/aki-cloud
        groups: aki_nodes
      loop: "{{ nodes | dict2items }}"
      loop_control:
        label: "{{ item.key }}"

- name: Apply aki-cloud update to nodes
  hosts: aki_nodes
  gather_facts: false
  become: false
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    git_pull_cmd: "git pull --ff-only"
    make_target: "{{ aki_make_target | default('up') }}"
    make_async_enabled: "{{ aki_make_async | default(true) | bool }}"
    make_async_timeout: "{{ aki_make_async_timeout | default(1800) | int }}"
    make_async_poll: "{{ aki_make_async_poll | default(10) | int }}"
  tasks:
    - name: Verify repository exists on remote host
      ansible.builtin.stat:
        path: "{{ project_root }}/.git"
      register: repo_git_dir

    - name: Ensure aki-cloud repository is present
      ansible.builtin.fail:
        msg: >-
          Git repository not found at {{ project_root }}.
          Clone the repository first or check the project_root setting.
      when: not repo_git_dir.stat.exists

    - name: Configure Git safe directory
      ansible.builtin.command: git config --global --add safe.directory {{ project_root }}
      changed_when: true
      ignore_errors: yes

    - name: Pull latest changes
      ansible.builtin.command: "{{ git_pull_cmd }}"
      args:
        chdir: "{{ project_root }}"
      register: git_pull
      changed_when: >-
        'Already up to date' not in
        ((git_pull.stdout | default('')) ~ (git_pull.stderr | default('')))

    - name: Run make {{ make_target }} (async)
      ansible.builtin.command: "make {{ make_target }}"
      args:
        chdir: "{{ project_root }}"
      async: "{{ make_async_timeout }}"
      poll: 0
      register: make_job
      changed_when: true
      when: make_async_enabled

    - name: Wait for make {{ make_target }} completion
      ansible.builtin.async_status:
        jid: "{{ make_job.ansible_job_id }}"
      register: make_result
      until: make_result.finished
      retries: 180
      delay: "{{ make_async_poll }}"
      when: make_async_enabled

    - name: Run make {{ make_target }} (synchronous)
      ansible.builtin.command: "make {{ make_target }}"
      args:
        chdir: "{{ project_root }}"
      register: make_output
      changed_when: true
      when: not make_async_enabled